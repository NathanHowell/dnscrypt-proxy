name: Publish Docker image

on:
  release:
    types: [published]
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v5

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
      with:
        images: nathanhowell/dnscrypt-proxy

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=local,mode=max,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
        context: .
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        load: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      run: pip install uv

    - name: Install test dependencies
      run: |
        uv sync

    - name: Test container functionality
      run: |
        # Get the first tag for testing
        IMAGE_TAG=$(echo '${{ steps.meta.outputs.tags }}' | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # Run the container tests with intelligent exit code handling using pytest
        if uv run python run_tests.py "$IMAGE_TAG"; then
          echo "::notice::All tests passed - container is fully functional"
        else
          exit_code=$?
          if [ $exit_code -eq 1 ]; then
            echo "::error::Critical infrastructure tests failed - this indicates a real problem with the container"
            echo "The container build has fundamental issues that prevent normal operation"
            exit 1
          elif [ $exit_code -eq 2 ]; then
            echo "::warning::Network-dependent tests failed, but critical infrastructure tests passed"
            echo "This is expected in CI environments with network restrictions"
            echo "The container should function normally in unrestricted network environments"
            echo "Critical infrastructure (container startup, port binding, configuration loading) is working correctly"
          else
            echo "::error::Unexpected test exit code: $exit_code"
            exit 1
          fi
        fi

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v6
      with:
        builder: ${{ steps.buildx.outputs.name }}
        cache-from: type=local,mode=max,src=/tmp/.buildx-cache
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
        context: .
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
